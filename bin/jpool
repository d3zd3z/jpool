#! /bin/sh

# Assume this script lives in a directory 'bin' with the appropriate
# classpath parallel to this.

# Nice and simple, but only works with GNU readlink.
#PRG=`readlink -f "$0"`

PRG="$0"
while [ -h "$PRG" ]; do
	ls=`ls -ld "$PRG"`
	link=`expr "$ls" : '.*-> \(.*\)$'`
	if expr "$link" : '/.*' > /dev/null; then
		PRG="$link"
	else
		PRG="`dirname "$PRG"`/$link"
	fi
done

BASEDIR=`dirname $PRG`
BASEDIR=`(cd "$BASEDIR"/.. && pwd)`

# For now, assume only one.
JAR=`echo $BASEDIR/target/scala_*/jpool_*-*.jar`
WORK_CLASSES=`echo $BASEDIR/target/scala_*/classes`

# Unfortunately, this has to be hard coded.
SCALA_LIB=`echo $BASEDIR/project/boot/scala-2.7.*/lib/scala-library.jar`

LIBS=`find $BASEDIR/lib_managed -name '*.jar' -printf "%p:"`

if [ ! -f $JAR ]; then
	echo "Unable to locate program jarfile"
	exit 1
fi

SO_PATH="${BASEDIR}/target/so"
if [ -z "${LD_LIBRARY_PATH}" ]; then
	LD_LIBRARY_PATH="${SO_PATH}"
else
	LD_LIBRARY_PATH="${SO_PATH}:${LD_LIBRARY_PATH}"
fi

if [ "$#" -lt 1 ]; then
	echo "Usage: jpool command args"
	exit 1
fi
CMD="$1"
shift

case "$CMD" in
	save)
		CMD=org.davidb.jpool.tools.Save
		;;
	list)
		CMD=org.davidb.jpool.tools.List
		;;
	restore)
		CMD=org.davidb.jpool.tools.Restore
		;;
	dump)
		CMD=org.davidb.jpool.tools.Dump
		;;
	show)
		CMD=org.davidb.jpool.tools.Show
		;;
	compact)
		CMD=org.davidb.jpool.tools.Compact
		;;
	h2)
		CMD=org.h2.tools.Shell
		;;
	mkindex)
		CMD=org.davidb.jpool.tools.MkIndex
		;;
	check)
		CMD=org.davidb.jpool.tools.Check
		;;
	clone)
		CMD=org.davidb.jpool.tools.Clone
		;;
	*)
		echo "Unknown command: $CMD"
		exit 1
		;;
esac

CLASSPATH="$WORK_CLASSES":"$LIBS":"$JAR":"$SCALA_LIB" \
LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
	exec java "$CMD" "$@"
